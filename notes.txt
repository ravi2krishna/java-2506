12 June
=======

    -> Non-Static Variables - individual copies for each object

    -> Static Variables - common copy for entire class

    -> Static Blocks - This is the block of code, that gets executed when the class is loaded into
        memory by JVM

        -> initialize the Static Variables, eveb before main method is executed

    -> Non-Static Blocks

    -> Non-Static Methods Cannot be called in Static Methods

    -> Static Methods Can be called in Non-Static Methods

14 June
=======    

    -> Inheritance - Obtaining the traits and characteristics from an existing
    class.
    
    -> According to our example, we want watchVideos() in multiple places
    will introduce Inheritance

    -> Types Of Inheritance

        -> Single
        -> Multiple  
        -> Multi Level
        -> Hirerarchial
        -> Hybrid

        -> NOTE: Java doesn't support multiple Inheritance with classes
        it supports with Interfaces 

    -> Single Inheritance
        -> Inherit features from single parent class
        -> child_class extends parent_class

    -> Multi Level Inheritance
        -> Inherit features from multi parent class
        -> child_class extends parent_class extends super_parent

    -> Multiple Inheritance
        -> Java doesn't support multiple Inheritance with classes
        -> Java supports multiple Inheritance with Interfaces
        -> Using Classes Extends failed with Multiple Inheritance
            -> class Admin extends Guest, VideoAdmin


        -> Interfaces - We have abstract methods i.e methods without 
        implementation
        
        -> Using Interfaces implments work with Multiple Inheritance
            -> class VideoAdmin implements Watchable, Addable

        -> Hirerarchial - Multiple classes inherit from same super class
            -> use extends to achieve

        -> Hybrid - Combination of single + mutiple / multilevel
        

19 June
=======

    -> Encapuslation

        -> To achieve Encapuslation we need to know about ACCESS MODIFIERS/SPECIFIERS

    -> Access Modifiers
        -> are keywords, they control VISIBILITY of your program members
            -> classes, methods, Variables, constructors etc
        
        -> We use Access Modifiers to enhance Security and determin scope of program members along with
        enforcing Encapuslation

    -> List of Access Modifiers

        -> Public
        -> private
        -> Protected
        -> Default

    ->  NOTE: If you understand access modifiers well, using variables, the same concept extends to 
        methods and constructors with slight differnce in Classes      

    -> Access Modifiers with Classes

        -> Top Level Classes can only be Public and Default(no modifier)

        -> We cannot make Top Level Classes as Private or Protected

        -> For inner classes (Nested Classess) we can use all 4 access modifiers

        -> NOTE: Inside OuterClass, we can access all inner classes, regardless of modifier.